"""update actual db to changes

Revision ID: 67fd856d7fd0
Revises: e3cd1a90590b
Create Date: 2025-08-28 15:51:12.775232

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '67fd856d7fd0'
down_revision = 'e3cd1a90590b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("roles_users")
    op.drop_table("user")
    op.drop_table("role")

    op.create_table("roles",
    sa.Column("id", sa.Integer(), nullable=False),
    sa.Column("name", sa.String(length=80), nullable=True),
    sa.Column("description", sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint("id"),
    sa.UniqueConstraint("name")
    )
    op.create_table("users",
    sa.Column("id", sa.Integer(), nullable=False),
    sa.Column("first_name", sa.String(length=255), nullable=False),
    sa.Column("last_name", sa.String(length=255), nullable=True),
    sa.Column("email", sa.String(length=255), nullable=False),
    sa.Column("password", sa.String(length=255), nullable=False),
    sa.Column("active", sa.Boolean(), nullable=True),
    sa.Column("confirmed_at", sa.DateTime(), nullable=True),
    sa.Column("fs_uniquifier", sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint("id"),
    sa.UniqueConstraint("email"),
    sa.UniqueConstraint("fs_uniquifier")
    )
    op.create_table("roles_users",
    sa.Column("user_id", sa.Integer(), nullable=True),
    sa.Column("role_id", sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ),
    sa.ForeignKeyConstraint(["user_id"], ["users.id"], )
    )

    """
    with op.batch_alter_table('battery_info', schema=None) as batch_op:
        batch_op.add_column(sa.Column('esp_id', sa.String(length=7), nullable=False))
        batch_op.add_column(sa.Column('root_id', sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column('live_websocket', sa.Boolean(), nullable=False))
        batch_op.drop_column('id')
        batch_op.drop_column('voltage')
        batch_op.drop_column('temperature')
        batch_op.drop_column('name')
        batch_op.drop_column('lon')
        batch_op.drop_column('charge')
        batch_op.drop_column('lat')
        batch_op.drop_column('parent_id')
    """

    """
    with op.batch_alter_table("battery_info", schema=None) as batch_op:
        # 1. Add the new column (nullable=True for now so it's allowed to exist)
        batch_op.add_column(sa.Column("esp_id", sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column("root_id", sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column("live_websocket", sa.Boolean(), nullable=False, server_default=sa.text("0")))

    # 2. Backfill esp_id values if needed (otherwise PK will fail)
    conn = op.get_bind()
    conn.execute(sa.text("UPDATE battery_info SET esp_id = LEFT(id, 7)"))  # or however esp_id derives from old id

    # 3. Now make esp_id NOT NULL + Primary Key
    with op.batch_alter_table("battery_info", schema=None) as batch_op:
        batch_op.alter_column("esp_id", existing_type=sa.String(length=7), nullable=False)
        batch_op.drop_constraint("PRIMARY", type_="primary")  # drop old PK
        batch_op.create_primary_key("pk_battery_info", ["esp_id"])

        # 4. Drop the old id + other unused columns
        batch_op.drop_column("id")
        batch_op.drop_column("voltage")
        batch_op.drop_column("temperature")
        batch_op.drop_column("name")
        batch_op.drop_column("lon")
        batch_op.drop_column("charge")
        batch_op.drop_column("lat")
        batch_op.drop_column("parent_id")
    """
    with op.batch_alter_table("battery_info", schema=None) as batch_op:
        batch_op.alter_column(
            "id",
            new_column_name="esp_id",
            existing_type=sa.String(length=64),   # whatever `id` was
            type_=sa.String(length=7),            # shrink/change to VARCHAR(7)
            nullable=False,
        )

        # add the new columns
        batch_op.add_column(sa.Column("root_id", sa.String(length=7), nullable=True))
        batch_op.add_column(sa.Column("live_websocket", sa.Boolean(), nullable=False, server_default=sa.text("0")))

        # drop the old unused columns
        batch_op.drop_column("voltage")
        batch_op.drop_column("temperature")
        batch_op.drop_column("name")
        batch_op.drop_column("lon")
        batch_op.drop_column("charge")
        batch_op.drop_column("lat")
        batch_op.drop_column("parent_id")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('battery_info', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parent_id', mysql.VARCHAR(length=64), nullable=True))
        batch_op.add_column(sa.Column('lat', mysql.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('charge', mysql.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('lon', mysql.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('name', mysql.VARCHAR(length=100), nullable=False))
        batch_op.add_column(sa.Column('temperature', mysql.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('voltage', mysql.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('id', mysql.VARCHAR(length=64), nullable=False))
        batch_op.drop_column('live_websocket')
        batch_op.drop_column('root_id')
        batch_op.drop_column('esp_id')

    op.drop_table("roles_users")
    op.drop_table("users")
    op.drop_table("roles")

    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('fs_uniquifier', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('fs_uniquifier')
    )
    op.create_table('roles_users',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    # ### end Alembic commands ###
